y = "y and predicted y")
# 準備
library(tidyverse)
set.seed(666)
# 準備
library(tidyverse)
set.seed(666)
# データ読み込み
library(carData)
data("TitanicSurvival")
head(TitanicSurvival)
# 準備
library(tidyverse)
set.seed(666)
# データ読み込み
library(carData)
data("TitanicSurvival")
head(TitanicSurvival)
# NA（欠損値）を含む行を削除
tita <- na.omit(TitanicSurvival)
# NA（欠損値）を含む行を削除
tita <- na.omit(TitanicSurvival)
# ID列を追加
df = tita %>% rownames_to_column("ID")
# 80%を学習用データに
train <- df %>% sample_frac(size = 0.8)
# ID列を追加
df <- tita %>% rownames_to_column("ID")
# 80%を学習用データに
train <- df %>% sample_frac(size = 0.8)
# 学習用データに使っていないIDの行をテスト用データに
test <- anti_join(df, train, by = "ID")
# ID列は予測に使わないため削除しておく
train <- train %>% select(-ID)
test <- test %>% select(-ID)
# 単一中間層
library(nnet)
titanic_nnet <- nnet(survived ~ . , data = train,
size = 2, decay = 0.1)
if(!require(NeuralNetTools)) {install.packages("NeuralNetTools")} # インストールされていなければインストールする
library(NeuralNetTools)
plotnet(titanic_nnet)
# 予測
y_pred_train = predict(titanic_nnet, train, type = "class")
# 混同行列
table(train$survived, y_pred_train)
# 正解率
library(MLmetrics)
Accuracy(y_pred = y_pred_train, y_true = train$survived)
# 予測
y_pred_test = predict(titanic_nnet, test, type = "class")
# 混同行列
table(test$survived, y_pred_test)
# 正解率
library(MLmetrics)
Accuracy(y_pred = y_pred_test, y_true = test$survived)
# パッケージの読み込み
library(tidyverse)
library(MLmetrics)
# 乱数の種を固定
set.seed(0)
# MNISTデータのダウンロード
if (!dir.exists('data')) { # もしdataディレクトリがないなら作成
dir.create('data')
}
# データの読み込み
mnist <- read.csv('data/train.csv')
# 1レコード目の1~10列
mnist[1, 1:10]
# 1レコード目の210~220列
mnist[1, 210:220]
# 1レコード目の最後の10列
k = ncol(mnist)
# 教師データ（目的変数）= 1列目
y <- mnist[,1]
# 特徴量（説明変数）= 残りの784列
X <- mnist[,-1]
# 0から1の値になるよう正規化し、(数値が0~255なので、255で割る)、行と列をt()で入れ替える
X <- t(X/255)
# 扱っているデータを覗く
i = 10 # 10レコード目
pixels = matrix(X[,i], nrow=28, byrow=TRUE)
image(t(apply(pixels, 2, rev)) , col=gray((255:0)/255),
xlab="", ylab="", main=paste("Label for this image:", y[i]))
i = 1000 # 1000レコード目
pixels = matrix(X[,i], nrow=28, byrow=TRUE)
image(t(apply(pixels, 2, rev)) , col=gray((255:0)/255),
xlab="", ylab="", main=paste("Label for this image:", y[i]))
# testとtrainに分割
# ID列を追加
df = mnist %>% rownames_to_column("ID")
# 80%を学習用データに
train <- df %>% sample_frac(size = 0.8)
# 学習用データに使っていないIDの行をテスト用データに
test <- anti_join(df, train, by = "ID")
# ID列は予測に使わないため削除しておく
train <- train %>% select(-ID)
test <- test %>% select(-ID)
# 教師データのラベル
table(train[, 1])
# ライブラリの用意
if(!require(h2o)) {install.packages("h2o")}
library(h2o)
# データをh2o用のデータ型に変換
train <- as.h2o(train)
# 初期化
h2o.init()
# データをh2o用のデータ型に変換
train <- as.h2o(train)
test <- as.h2o(test)
# 1列目（目的変数）をfactor型に変換
train[,1] = h2o::as.factor(train[,1])
test[,1] = h2o::as.factor(test[,1])
# trainデータを学習用のものと検証用のものに分ける
splits <- h2o.splitFrame(train, ratios = 0.8, seed = 0)
# 学習
mnist_dl = h2o.deeplearning(
x = 2:ncol(train), # 特徴量の列番号を指定
y = 1,             # 目的変数の列番号を指定
training_frame = splits[[1]],   # 訓練データを指定
validation_frame = splits[[2]], # 検証データを指定（学習には使わず、精度を測るためだけに使う）
activation = c("RectifierWithDropout"), # 活性化関数を指定
hidden = c(128, 64, 16), # 中間層（隠れ層）のサイズ
epochs = 15,       # エポック数。学習データ何回分の学習を反復させて重みを更新していくか。
hidden_dropout_ratios = c(0.5, 0.5, 0.5), # 各中間層においてdropoutするユニットの割合
sparse = TRUE,     # 0が多いデータ（スパースデータ）の取り扱い方を変え、メモリ使用量を抑える。
standardize = TRUE,# データの標準化を学習前に行う
seed = 0
)
mnist_dl
# 予測誤差の推移
plot(mnist_dl)
# 予測
pred <- h2o.predict(mnist_dl, test)
# 予測結果
pred
# 予測確率
round(pred[,2:11], 3)
y_true = as.vector(test[,1])
y_pred = as.vector(pred[,1])
# 混同行列
table(y_true, y_pred)
# 混同行列（h2oパッケージの関数を使う場合）
h2o.confusionMatrix(mnist_dl, test)
# 正解率
library(MLmetrics)
Accuracy(y_pred = y_pred, y_true = y_true)
T
F
TRUE
true
True
df
iris
ncols(iris)
ncol(iris)
nrow(iris)
# エクセル読み込み
df <- read_excel("test_scores.xlsx")
# パッケージ読み込み
install.packages("readxl") #インストール
library("readxl") # 読み込み
# エクセル読み込み
df <- read_excel("test_scores.xlsx")
dim(df)
# パッケージのインストール
install.packages("dplyr")
```{r}
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
read_excel("test_scores.xlsx") %>% head()
# パッケージの読み込み
library(dplyr)
read_excel("test_scores.xlsx") %>% head()
library("readxl") # 読み込み
read_excel("test_scores.xlsx") %>% head()
# subset()は条件（クラスがCである）に合う行を取り出す関数
df %>% subset(クラス == "C") %>% head()
|
or
df
df %>% filter(クラス == "C")
df %>% filter(if_any(. > 90))
df %>% filter(if_any( > 90))
df %>% filter(if_any(国語 > 90))
df %>% filter(if_any(df$国語 > 90))
df %>% filter(if_any(ends_with("語"),. > 90))
df %>% filter(if_any(ends_with("語"), ~ . > 90))
df %>% filter(if_all(ends_with("語"), ~ . > 90))
filter(df, if_any(. == 100))
# 「語」で終わる列名すべてで90以上の値をとる行を取り出す
# if_all()をif_any()に変えると「いずれかで90以上の値」という条件になる
df %>% filter(if_all(ends_with("語"), ~ . > 90))
# 「語」で終わる列名すべてで90以上の値をとる行を取り出す
# if_all()をif_any()に変えると「いずれかで90以上の値」という条件になる
df %>% filter(if_all(ends_with("語"), ~ . > 90))
# データフレームのいずれかの変数で100という値をとる行
filter_all(df, any_vars(. == 100))
filter(df, if_all(, ~ . == 100))
filter(df, if_all( ~ . == 100))
filter(df, if_all(everything(), ~ . == 100))
df %>% summarize(across(where(is.numeric), mean),
count = n())
df %>% summarize(mean = across(where(is.numeric), mean),
count = n())
df %>% summarize(across(where(is.numeric), mean),
count = n)
df %>% summarize(across(where(is.numeric), mean),
count = n)
df %>% summarize(across(where(is.numeric), mean),
count = n)
df %>% summarize(across(where(is.numeric), mean),
count = n())
df %>% summarize(across(where(is.numeric), mean),
count = nrow())
df %>% summarize(across(where(is.numeric), mean),
count = n())
~ .x + 1
x = 1
~ .x + 1
a <- ~ .x + 1
a
a(1)
class(a)
. == 100
filter(df, if_all(everything(), ~ .x == 100))
filter(df, if_any(everything(), ~ .x == 100))
filter(df, if_any(everything(), ~ . == 100))
# データフレームのいずれかの変数で100という値をとる行
filter_all(df, any_vars(. == 100))
# データフレームのいずれかの変数で100という値をとる行
filter(df, if_any(everything(), ~ . == 100))
# （参考）やや古い書き方で filter_all(df, any_vars(. == 100)) とも書ける
filter_all(df, any_vars(. == 100))
# （参考）やや古い書き方で filter_all(df, any_vars(. == 100)) とも書ける
filter(df, if_any(everything(), ~ . == 100)) == filter_all(df, any_vars(. == 100))
# 「語」で終わる列名すべてで90以上の値をとる行を取り出す
# if_all()をif_any()に変えると「いずれかで90以上の値」という条件になる
df %>% filter(if_all(ends_with("語"), ~ . > 90))
df %>% summarize(across(where(is.numeric), mean),
count = n())
df %>% summarize(filter(where(is.numeric), mean),
count = n())
df %>% summarize(across(where(is.numeric), mean),
count = n())
function(.){. == 100}
a <- function(.){. == 100}
a(1)
a(100)
filter(df, if_any(everything(), function(.){. == 100}))
df %>% summarize(across(where(is.numeric), mean),
across(where(is.factor), mean),
count = n())
df %>% summarize(across(where(is.numeric), mean),
across(where(is.string), mean),
count = n())
df$クラス
class(df$クラス)
df %>% summarize(across(where(is.numeric), mean),
across(where(is.char), mean),
count = n())
df %>% summarize(across(where(is.numeric), mean),
across(where(is.character), mean),
count = n())
df %>% summarize(across(where(is.numeric), mean),
across(where(is.character), levels),
count = n())
levels(df$クラス)
count(df$クラス)
df$クラス
table(df$クラス)
df
n_distinct(df$クラス)
df %>% summarize(across(where(is.numeric), mean),
across(where(is.character), n_distinct),
count = n())
df %>% summarize(mean = across(where(is.numeric), mean),
n_levels = across(where(is.character), n_distinct),
n_obs = n())
df %>% summarize(mean = across(where(is.numeric), mean),
n_levels = across(where(is.character), n_distinct),
n_obs = n())
f <- function(x) {2 * x}
f(4)
f(2)
f(1)
f <- function(x) 2 * x
f(1)
df %>% dplyr::mutate(数国計 = 数学 + 国語,
数英計 = 数学 + 英語)
# データフレームを分割
A <- df[1:20,]   # 第1~20行
# データフレームの連結
bind_rows(A, B)
# データフレームを分割
A <- df[1:20, ]   # 第1~20行
B <- df[21:40, ]  # 第21~40行
# データフレームの連結
bind_rows(A, B)
# データフレームの用意
customers <- data.frame(顧客id = 1:2,
性別 = c("男性", "女性"),
年齢 = c("20代", "10代"))
sales <- data.frame(顧客id = c(1,2,3,2),
商品 = c("みかん", "りんご", "りんご", "みかん"),
個数 = c(1:4))
# 2名の顧客情報
customers
# 3名の顧客による4回の取引記録
sales
# "顧客id"をキーにcustomersとsalesを結合
dplyr::full_join(customers, sales, by = "顧客id")
# データフレームの用意
customers <- data.frame(顧客id = 1:3,
性別 = c("男性", "女性", "女性"),
年齢 = c(20, 24, 35))
sales <- data.frame(顧客id = c(1,2,2),
商品 = c("みかん", "りんご", "みかん"),
個数 = c(1:3))
sales
# 2名の顧客情報
customers
# 顧客データ
customers <- data.frame(顧客id = 1:3,
性別 = c("男性", "女性", "女性"),
年齢 = c(20, 24, 35))
# 売上データ
sales <- data.frame(顧客id = c(1,2,2),
商品 = c("みかん", "りんご", "みかん"),
個数 = c(1:3))
# 顧客データ
customers <- data.frame(顧客id = 1:3,
性別 = c("男性", "女性", "女性"),
年齢 = c(20, 24, 35))
customers
# 売上データ
sales <- data.frame(顧客id = c(1,2,2),
商品 = c("みかん", "りんご", "みかん"),
個数 = c(1:3))
sales
# 売上データ
sales <- data.frame(顧客id = c(1,2,2),
購入金額 = c(1000, 2500, 1800))
sales
# "顧客id"をキーにcustomersとsalesを結合
dplyr::full_join(customers, sales, by = "顧客id")
# 売上データ
sales <- data.frame(取引id = 1:3,
顧客id = c(1,2,2),
購入金額 = c(1000, 2500, 1800))
sales
# "顧客id"をキーにcustomersとsalesを結合
dplyr::full_join(customers, sales, by = "顧客id")
dplyr::inner_join(customers, sales, by = "顧客id")
# ワイド形式
sales_wide = sales %>% tidyr::pivot_wider(names_from = "取引id", values_from = "購入金額")
sales_wide
# ロング形式
sales
# 売上データ
sales <- data.frame(顧客id = c(1,2,2),
商品 = c("みかん", "りんご", "りんご"),
個数 = 1:3)
sales
# "顧客id"をキーにcustomersとsalesを結合
dplyr::full_join(customers, sales, by = "顧客id")
:3 * 100
1:3 * 100
# 売上データ
sales <- data.frame(顧客id = c(1,2,2),
商品 = c("みかん", "りんご", "りんご"),
金額 = 1:3 * 100)
sales
# "顧客id"をキーにcustomersとsalesを結合
dplyr::full_join(customers, sales, by = "顧客id")
dplyr::inner_join(customers, sales, by = "顧客id")
# ロング形式
sales
# ワイド形式
sales_wide = sales %>% tidyr::pivot_wider(names_from = "取引id", values_from = "購入金額")
# ワイド形式
sales_wide = sales %>% tidyr::pivot_wider(names_from = "商品", values_from = "個数")
sales_wide
# ワイド形式
sales_wide = sales %>% tidyr::pivot_wider(names_from = "商品", values_from = "金額")
# ワイド形式
sales_wide = sales %>% tidyr::pivot_wider(names_from = "商品", values_from = "金額")
sales_wide
dplyr::inner_join(customers, sales, by = "顧客id")
# ロング形式
sales
# ワイド形式
sales_wide = sales %>% tidyr::pivot_wider(names_from = "商品", values_from = "金額")
sales_wide
# ワイド形式
sales_wide = sales %>% tidyr::pivot_wider(names_from = "商品", values_from = "金額")
sales_wide
# "顧客id"をキーにcustomersとsalesを結合
dplyr::full_join(customers, sales, by = "顧客id")
# ロング形式
sales
# ワイド形式
sales_wide = sales %>% tidyr::pivot_wider(names_from = "商品", values_from = "金額")
sales_wide
sales
# ワイド形式
sales_wide = sales %>% tidyr::pivot_wider(names_from = "商品", values_from = 金額)
# ワイド形式
sales_wide = sales %>% tidyr::pivot_wider(names_from = "商品", values_from = "金額")
sales_wide
# ワイド形式
sales_wide = sales %>% tidyr::pivot_wider(names_from = "商品", values_from = 金額)
# ワイド形式
sales_wide = sales %>% tidyr::pivot_wider(names_from = "商品", values_from = "金額")
# ワイド形式
sales_wide = sales %>% tidyr::pivot_wider(names_from = "商品", values_from = "金額")
sales_wide
# ワイド形式
sales_wide = sales %>% tidyr::pivot_wider(names_from = "商品", values_from = "金額")
sales_wide
sales
1:3 * 100
sales$金額
# ワイド形式
sales_wide = sales %>% tidyr::pivot_wider(names_from = "商品", values_from = "金額")
sales$金額
class(sales$金額)
sales$金額[0]
sales$金額[1]
sales$金額[2]
sales$金額[3]
1
# 売上データ
sales <- data.frame(顧客id = c(1,2,2),
商品 = c("みかん", "りんご", "りんご"),
金額 = c(1, 2, 3) * 100)
sales
# 売上データ
sales <- data.frame(顧客id = c(1,2,2),
商品 = c("みかん", "りんご", "りんご"),
金額 = c(1, 2, 3) * 100)
sales
これを`full_join()`で結合する。`full_join(df1, df2, by = "id")`のように書く。
```{r}
# "顧客id"をキーにcustomersとsalesを結合
dplyr::full_join(customers, sales, by = "顧客id")
# "顧客id"をキーにcustomersとsalesを結合
dplyr::full_join(customers, sales, by = "顧客id")
# 売上データ
sales <- data.frame(顧客id = c(1,2,2),
商品 = c("みかん", "りんご", "りんご"),
金額 = c(1, 2, 3) * 100)
sales
# 売上データ
sales <- data.frame(顧客id = c(1,2,2),
商品 = c("みかん", "りんご", "りんご"),
金額 = c(1, 2, 3) * 100)
sales
これを`full_join()`で結合する。`full_join(df1, df2, by = "id")`のように書く。
```{r}
# "顧客id"をキーにcustomersとsalesを結合
dplyr::full_join(customers, sales, by = "顧客id")
# "顧客id"をキーにcustomersとsalesを結合
dplyr::full_join(customers, sales, by = "顧客id")
このように`顧客id`で紐づけしてひとつのデータフレームへと結合する。
# ワイド形式
sales_wide = sales %>% tidyr::pivot_wider(names_from = "商品", values_from = "金額")
sales_wide
# 売上データ
sales <- data.frame(顧客id = c(1,2,2),
商品 = c("みかん", "りんご", "りんご"),
金額 = c(200, 300, 300))
sales
# "顧客id"をキーにcustomersとsalesを結合
dplyr::full_join(customers, sales, by = "顧客id")
dplyr::inner_join(customers, sales, by = "顧客id")
# ロング形式
sales
# ワイド形式
sales_wide = sales %>% tidyr::pivot_wider(names_from = "商品", values_from = "金額")
sales_wide
# ワイド形式
sales_wide = sales %>% tidyr::pivot_wider(names_from = "商品", values_from = 金額)
# ワイド形式
sales_wide = sales %>% tidyr::pivot_wider(names_from = 商品, values_from = 金額)
# ワイド形式
sales_wide = sales %>% tidyr::pivot_wider(names_from = "商品", values_from = "金額")
# "顧客id"をキーにcustomersとtransactionsを結合
dplyr::full_join(customers, transactions, by = "顧客id")
# 取引データ
transactions <- data.frame(取引id = 1:3,
顧客id = c(1,2,2),
商品 = c("みかん", "りんご", "りんご"),
金額 = c(200, 300, 300))
transactions
# "顧客id"をキーにcustomersとtransactionsを結合
dplyr::full_join(customers, transactions, by = "顧客id")
# ワイド形式
transactions_wide = transactions %>% tidyr::pivot_wider(names_from = "商品", values_from = "金額")
transactions_wide
dim(df)
nrow(df)
colMeans(iris)
colMeans(iris$Sepal.Length)
select(iris, is.numeric)
library(dplyr)
iris %>% select(is.numeric)
- 左上がRスクリプトの入力欄（コードを書く部分）
iris %>% select(where(is.numeric))
iris %>% select(where(is.numeric)) %>% colMeans
iris %>% select(where(is.numeric)) %>% mean
