install.packages(c("dplyr", "readxl", "tidyverse"))
install.packages(c("dplyr", "readxl", "tidyverse"))
install.packages("estatapi")
source('~/Downloads/chizai_historical_after_1975_by_eStat.R', echo=TRUE)
library(tidyverse)
install.packages(`tidyverse`)
install.packages('tidyverse')
source('~/Downloads/chizai_historical_after_1975_by_eStat.R', echo=TRUE)
library(tidyverse)
install.packages('tidyverse')
library(estatapi)
library(tidyverse)
install.packages('tidyverse')
install.packages("tidyverse")
library(tidyverse)
library(tidyverse)
install.packages(c("clipr", "cluster", "MASS", "Matrix", "mgcv", "nlme", "rpart", "survival", "tinytex"))
library(tidyverse)
library("tidyverse")
install.packages("tidyverse")
library(estatapi)
library(tidyverse)
AppID <- "34c4af7da8d5e0a88338a51ab42c4b6ca30e8bd2"
# 事前調査１：統計の検索
ResultData <- estat_getStatsList(appId = AppID, searchWord = "社会・人口統計体系")
ResultData %>% as.data.frame() %>% head() # 頭6行を見る
# これが財政の統計
# 0000010104
# 社会・人口統計体系
# 総務省
# 都道府県データ 基礎データ
# Ｄ　行政基盤
# https://www.e-stat.go.jp/stat-search/database?page=1&layout=datalist&toukei=00200502&tstat=000001111375&cycle=8&tclass1=000001111377&statdisp_id=0000010104&result_page=1&second=1&second2=1
# 事前調査２：統計のIDを指定してメタ情報を取得
StatID = "0000010104"
MetaInfo <- estat_getMetaInfo(appId = AppID, statsDataId = StatID)
MetaInfo
# MetaInfo$cat01 %>% View
MetaInfo$cat01$`@name` %>% str_subset("都道府県")
# ほしい変数のカテゴリ名
category = MetaInfo$cat01$`@name` %>% str_subset("都道府県") %>%
str_subset("議会費|総務費|民生費|生活保護費|労働費|農林水産業費|商工費|土木費|災害復旧事業費|公債費（都道府県財政）（目的別歳出内訳）|歳出決算総額|衛生費|児童福祉費|小学校費|教育費|中学校費|幼稚園費")
# 本番：統計のIDを指定してデータを取得
StatData <- estat_getStatsData(appId = AppID,
statsDataId = StatID,
# cdCat01 = category[3] %>% str_extract("[:alnum:]+"),
cdCat01 = category %>% str_extract("[:alnum:]+"),
cdTime = 1975:1979 %>% str_c("100000"))
# 議会費, 総務費は2010年以降しか無い模様
# 中身をチェック
StatData %>% str()
StatData %>% as.data.frame() %>% head()
StatData$`Ｄ　行政基盤` %>% unique()%>%
str_subset("議会費|総務費|民生費|生活保護費|労働費|農林水産業費|商工費|土木費|災害復旧事業費|公債費（都道府県財政）（目的別歳出内訳）|歳出決算総額|衛生費|児童福祉費|小学校費|教育費|中学校費|幼稚園費")
# 整形
df = StatData %>% as_data_frame() %>% select(year = 調査年, fuken = 地域, variable = `Ｄ　行政基盤`, value) %>%
mutate(year = year %>% str_extract("[0-9]+"),
variable = variable %>% str_remove_all("D|[0-9]|_|（.+）")) %>%
spread(variable, value) %>%
rename(kosai = 公債費, saigai = 災害復旧事業費, shoko = 商工費, doboku = 土木費, norin = 農林水産業費,
minsei = 民生費, rodo = 労働費, jifuku = 児童福祉費, kyoiku = 教育費, eisei = 衛生費,
shogaku = 小学校費, chugaku = 中学校費, yochien = 幼稚園費, total = 歳出決算総額,
seiho = 生活保護費) %>%
select(-社会教育費) #「教育」にヒットして紛れ込んでいたので削除
df = df %>% mutate(fuken = fuken %>% str_replace_all("全国","ken_all"))
install.packages('tidyverse')
library(estatapi)
library(tidyverse)
# Chunk 1
knitr::opts_chunk$set(fig.align = 'center', message = F, warning = F)
# Chunk 2
#install.packages("Diagrammes")
library(DiagrammeR)
grViz("digraph dot{
graph[rankdir = LR]
node[shape = circle, fontname = 'Yu Gothic']
edge[fontname = 'Yu Gothic', fontsize = 10]
能力A -> 所得Y [label='10']
能力A -> 学歴X [label='A≧80からランダム抽出']
学歴X -> 所得Y [label='500']
{rank = same; 能力A; 学歴X}
}")
# Chunk 3
#install.packages("Diagrammes")
library(DiagrammeR)
grViz("digraph dot{
graph[rankdir = LR]
node[shape = circle, fontname = 'Yu Gothic']
edge[fontname = 'Yu Gothic', fontsize = 10]
能力A -> 所得Y [label='10']
能力A -> 学歴X [label='A≧80からランダム抽出']
学歴X -> 所得Y [label='500']
学費免除Z -> 学歴X [label='90％の確率で大学を卒業']
{rank = same; 能力A; 学歴X}
}")
# パッケージの読み込み
library(tidyverse)
# 乱数の種を固定　=>　毎回同じように乱数を発生させるようにする。0を他の数値に変えると異なる乱数となる。
set.seed(0)
# データの生成 ----------------
# n:サンプルサイズ
n <- 10000
# 能力は0から100まで均等に分布。#runifは一様分布を発生させる関数。標本規模n、最小値0、最大値100
ability <- runif(n, min = 0, max = 100)
# IDとabilityをデータフレームに格納する。
# 以下の"tibble()"はtidyverseにおけるデータフレームを作成する関数。
# 代わりに"data.frame()"を用いても構わない。
df <- tibble(ID = 1:n, ability)
# 大卒ダミーの作成
# 能力が 80 以上の約 2000人の中から約 1000人をランダムに選ばれて大卒にする。
# dfからdplyr::filter()で抽出し、sample_fram()でさらに半分をランダムに抽出する。
university_df <- df %>% filter(ability >= 80) %>% sample_frac(0.5) # 大卒の人
# university_df のデータフレームに、universityという変数を作成し、すべて1とする。
university_df["university"] = 1
# dfからdplyr::anti_join()を用いて"university_df"とマッチしなかった人を抽出する。
no_university_df <- anti_join(df, university_df, by = c("ID","ability")) # 大卒ではない人
# no_university_dfのデータフレームに、universityという変数を作成し、すべて0とする。
no_university_df["university"] = 0
# university_dfとno_university_dfを、dplyr::bind_rowsを用いて結合してあたらしいdfとし、ID順で並べる
df <- bind_rows(university_df, no_university_df) %>% arrange(ID) # 両者を結合
# ここまで前回と同じ ------------
# ここから追加部分 --------------
# 条件３：学費免除制度
# dfからsample_fram()で30%をランダムに抽出する。
exemption_df <- df %>% sample_frac(0.3)
# 学費免除ダミー(exemption) = 1
exemption_df["exemption"] = 1
# さらにそこから50%の人が学費免除を利用して卒業する。
grad_exemption_df <- exemption_df %>% sample_frac(0.5)
View(grad_exemption_df)
# 学費免除ダミー(exemption) = 1
grad_exemption_df <- grad_exemption_df %>% mutate(university = 1)
temp <- grad_exemption_df %>% mutate(temp = 1)
View(temp)
temp <- grad_exemption_df %>% mutate(temp = binom)
temp <- grad_exemption_df %>% mutate(temp = binom(1500, 0.5))
binom(1500, 0.5)
rnorm(3,2,2)
binom(1500, 0.5)
temp <- grad_exemption_df %>% mutate(temp = rnorm(3,2,2))
temp <- grad_exemption_df %>% mutate(temp = rnorm(1500,2,2))
rbinom(3, 1, 0.5)
rbinom(10, 1, 0.5)
rbinom(10, 2, 0.5)
rbinom(10, 5, 0.5)
> rbinom(10, 5, 0.5)
rbinom(10, 5, 0.5)
rbinom(10, 5, 0.5)
rbinom(10, 1, 0.5)
rbinom(10, 1, 0.5)
rbinom(20, 5, 0.5)
rbinom(20, 1, 0.5)
rbinom(20, 1, 0.5)
rbinom(20, 1, 0.5)
rbinom(20, 1, 0.5)
rbinom(20, 1, 0.5)
View(df)
View(df)
# dfの個体は、30%の確率でexemption = 1となる
df <- df %>% mutate(exemption = rbinom(10000, 1, 0.3))
# dfの個体は、30%の確率でexemption = 1となる
df <- df %>% mutate(exemption = rbinom(10000, 1, 0.3)) # rbinom(n, m, p): 成功確率pの試行をm回試みたときの成功回数の分布をnを生成
df <- df %>% mutate(university = case_when(exemption == 1 ~ 1)) # それ以外は0
# university_dfとno_university_dfを、dplyr::bind_rowsを用いて結合してあたらしいdfとし、ID順で並べる
df <- bind_rows(university_df, no_university_df) %>% arrange(ID) # 両者を結合
# university_dfとno_university_dfを、dplyr::bind_rowsを用いて結合してあたらしいdfとし、ID順で並べる
df_temp1 <- bind_rows(university_df, no_university_df) %>% arrange(ID) # 両者を結合
# dfの個体は、30%の確率でexemption = 1となる
# rbinom(n, m, p): 成功確率pの試行をm回試みたときの成功回数の分布をnを生成
df_temp2 <- df_temp1 %>% mutate(exemption = rbinom(10000, 1, 0.3))
#
df <- df_temp3 %>% mutate(university = case_when(exemption == 1 | university == 1 ~ 1, TRUE ~ 0)) # それ以外は0
#
df <- df_temp2 %>% mutate(university = case_when(exemption == 1 | university == 1 ~ 1, TRUE ~ 0)) # それ以外は0
exemption_df <- df_temp2 %>% filter(exemption == 1)
n_exemption <- length(exemption_df)
n_exemption
n_exemption <- size(exemption_df)
View(exemption_df)
n_exemption <- size(exemption_df$ID)
n_exemption
n_exemption <- nrow(exemption_df$ID)
n_exemption
n_exemption <- nrow(exemption_df)
n_exemption
n_exemption <- nrow(exemption_df)
n_exemption
# exemption=1のときにuniversity=1となるように変更
#　mutate()の中でcase_when()を使い、excemption = 1 あるいは university = 1のときはuniversity=1とし、それ以外はuniversity=0とする
df <- df_temp2 %>%
mutate(university = case_when(exemption == rbinom(n_exemption, 1, 0.5) | university == 1 ~ 1, TRUE ~ 0)) # それ以外は0
# dfの個体は、30%の確率でexemption = 1となる
# rbinom(n, m, p): 成功確率pの試行をm回試みたときの成功回数の分布をnを生成
df_temp2 <- df_temp1 %>% mutate(exemption = rbinom(10000, 1, 0.3))
# 学費免除となった人数を記録（あとで使う）
exemption_df <- df_temp2 %>% filter(exemption == 1)
n_exemption <- nrow(exemption_df)
# exemption=1のときにuniversity=1となるように変更
#　mutate()の中でcase_when()を使い、excemption = 1 あるいは university = 1のときはuniversity=1とし、それ以外はuniversity=0とする
df <- df_temp2 %>%
mutate(university = case_when(exemption == rbinom(n_exemption, 1, 0.5) | university == 1 ~ 1, TRUE ~ 0)) # それ以外は0
# dfの個体は、30%の確率でexemption = 1となる
# rbinom(n, m, p): 成功確率pの試行をm回試みたときの成功回数の分布をnを生成
df_temp2 <- df_temp1 %>% mutate(exemption = rbinom(10000, 1, 0.3))
# exemption=1のときにuniversity=1となるように変更
#　mutate()の中でcase_when()を使い、excemption = 1 あるいは university = 1のときはuniversity=1とし、それ以外はuniversity=0とする
df <- df_temp2 %>%
mutate(university = case_when(exemption == 1 ~ binom(n_exemption, 1, 0.5),
university == 1 ~ 1,
TRUE ~ 0)) # それ以外は0
# exemption=1のときにuniversity=1となるように変更
#　mutate()の中でcase_when()を使い、excemption = 1 あるいは university = 1のときはuniversity=1とし、それ以外はuniversity=0とする
df <- df_temp2 %>%
mutate(university = case_when(exemption == 1 ~ rbinom(n_exemption, 1, 0.5),
university == 1 ~ 1,
TRUE ~ 0)) # それ以外は0
# exemption=1のときにuniversity=1となるように変更
#　mutate()の中でcase_when()を使い、excemption = 1 あるいは university = 1のときはuniversity=1とし、それ以外はuniversity=0とする
df <- df_temp2 %>%
mutate(university = case_when(exemption == 1 ~ rbinom(10000, 1, 0.5),
university == 1 ~ 1,
TRUE ~ 0)) # それ以外は0
# exemption=1のときにuniversity=1となるように変更
#　mutate()の中でcase_when()を使い、excemption = 1 あるいは university = 1のときはuniversity=1とし、それ以外はuniversity=0とする
df <- df_temp2 %>%
mutate(university = case_when(exemption == 1 ~ rbinom(10000, 1, 0.5),
university == 1 ~ 1,
TRUE ~ 0)) # それ以外は0
# exemption=1のときにuniversity=1となるように変更
#　mutate()の中でcase_when()を使い、excemption = 1 あるいは university = 1のときはuniversity=1とし、それ以外はuniversity=0とする
df <- df_temp2 %>%
mutate(university = case_when(exemption == 1 ~ rbinom(n_exemption, 1, 0.5),
university == 1 ~ 1,
TRUE ~ 0)) # それ以外は0
# exemption=1のときにuniversity=1となるように変更
#　mutate()の中でcase_when()を使い、excemption = 1 あるいは university = 1のときはuniversity=1とし、それ以外はuniversity=0とする
df <- df_temp2 %>%
mutate(university = case_when(exemption == 1 ~ rbinom(n_exemption, 1, 0.5),
TRUE ~ 0)) # それ以外は0
# exemption=1のときにuniversity=1となるように変更
#　mutate()の中でcase_when()を使い、excemption = 1 あるいは university = 1のときはuniversity=1とし、それ以外はuniversity=0とする
df <- df_temp2 %>%
mutate(university = case_when(exemption == 1 ~ rbinom(1, 0.5),
university == 1 ~ 1,
TRUE ~ 0)) # それ以外は0
# exemption=1のときにuniversity=1となるように変更
#　mutate()の中でcase_when()を使い、excemption = 1 あるいは university = 1のときはuniversity=1とし、それ以外はuniversity=0とする
df <- df_temp2 %>%
mutate(university = case_when(exemption == 1 ~ rbinom(1, 1, 0.5),
university == 1 ~ 1,
TRUE ~ 0)) # それ以外は0
# exemption=1のときにuniversity=1となるように変更
#　mutate()の中でcase_when()を使い、excemption = 1 あるいは university = 1のときはuniversity=1とし、それ以外はuniversity=0とする
df <- df_temp2 %>%
mutate(university = case_when(exemption == 1 ~ 1,
university == 1 ~ 1,
TRUE ~ 0)) # それ以外は0
# exemption=1のときにuniversity=1となるように変更
#　mutate()の中でcase_when()を使い、excemption = 1 あるいは university = 1のときはuniversity=1とし、それ以外はuniversity=0とする
df <- df_temp2 %>%
mutate(university = case_when(exemption == 1 ~ 1,
university == 1 ~ 1,
TRUE ~ 0)) # それ以外は0
# exemption=1のときにuniversity=1となるように変更
#　mutate()の中でcase_when()を使い、excemption = 1 あるいは university = 1のときはuniversity=1とし、それ以外はuniversity=0とする
df <- df_temp2 %>%
mutate(university = case_when(exemption == 1 ~ rbinom(n_exemption, 1, 0.5),
university == 1 ~ 1,
TRUE ~ 0)) # それ以外は0
# exemption=1のときにuniversity=1となるように変更
#　mutate()の中でcase_when()を使い、excemption = 1 あるいは university = 1のときはuniversity=1とし、それ以外はuniversity=0とする
df <- df_temp2 %>%
mutate(university = case_when(exemption == 1 ~ rbinom(10000, 1, 0.5),
university == 1 ~ 1,
TRUE ~ 0)) # それ以外は0
# exemption=1のときにuniversity=1となるように変更
#　mutate()の中でcase_when()を使い、excemption = 1 あるいは university = 1のときはuniversity=1とし、それ以外はuniversity=0とする
df <- df_temp2 %>%
mutate(university = case_when(exemption == 1 ~ rbinom(1, 1, 0.5),
university == 1 ~ 1,
TRUE ~ 0)) # それ以外は0
# exemption=1のときに50%の確率でuniversity=1となるように変更
#　mutate()の中でcase_when()を使い、excemption = 1 あるいは university = 1のときはuniversity=1とし、それ以外はuniversity=0とする
df <- df_temp2 %>%
mutate(university_temp = case_when(exemption == 1 ~ rbinom(, 1, 0.5),
TRUE ~ 0)) # それ以外は0
# exemption=1のときに50%の確率でuniversity=1となるように変更
#　mutate()の中でcase_when()を使い、excemption = 1 あるいは university = 1のときはuniversity=1とし、それ以外はuniversity=0とする
df <- df_temp2 %>%
mutate(university_temp = case_when(exemption == 1 ~ rbinom(n_exemption, 1, 0.5),
TRUE ~ 0)) # それ以外は0
rlang::last_error()
df_temp3 <- df_temp2 %>% mutate(binom_harf = rbinom(10000, 1, 0.5))
# exemption=1のときに50%の確率でuniversity=1となるように変更
#　mutate()の中でcase_when()を使い、excemption = 1 あるいは university = 1のときはuniversity=1とし、それ以外はuniversity=0とする
df <- df_temp3 %>%
mutate(university_temp = case_when(exemption == 1 ~ binom_harf,
university == 1 ~ 1,
TRUE ~ 0)) # それ以外は0
View(df_temp3)
# exemption=1のときに50%の確率でuniversity=1となるように変更
#　mutate()の中でcase_when()を使い、excemption = 1 あるいは university = 1のときはuniversity=1とし、それ以外はuniversity=0とする
df <- df_temp3 %>%
mutate(university_temp = case_when(exemption == 1 ~ is.integer(binom_harf),
university == 1 ~ 1,
TRUE ~ 0)) # それ以外は0
# exemption=1のときに50%の確率でuniversity=1となるように変更
#　mutate()の中でcase_when()を使い、excemption = 1 あるいは university = 1のときはuniversity=1とし、それ以外はuniversity=0とする
df <- df_temp3 %>%
mutate(university_temp = case_when(exemption == 1 ~ is.integer(binom_harf),
university == 1 ~ 1,
TRUE ~ 0)) # それ以外は0
last_error()
rlang::last_error()
# university_dfとno_university_dfを、dplyr::bind_rowsを用いて結合してあたらしいdfとし、ID順で並べる
df_temp1 <- bind_rows(university_df, no_university_df) %>% arrange(ID) # 両者を結合
View(df_temp1)
mutate(university_temp = case_when(exemption == 1 ~ "binom_harf"",
# exemption=1のときに50%の確率でuniversity=1となるように変更
#　mutate()の中でcase_when()を使い、excemption = 1 あるいは university = 1のときはuniversity=1とし、それ以外はuniversity=0とする
df <- df_temp3 %>%
mutate(university_temp = case_when(exemption == 1 ~ "binom_harf",
university == 1 ~ 1,
TRUE ~ 0)) # それ以外は0
# exemption=1のときに50%の確率でuniversity=1となるように変更
#　mutate()の中でcase_when()を使い、excemption = 1 あるいは university = 1のときはuniversity=1とし、それ以外はuniversity=0とする
df <- df_temp3 %>%
mutate(university_temp = case_when(exemption == 1 ~ "binom_harf",
university == 1 ~ 1,
TRUE ~ 0)) # それ以外は0
# exemption=1のときに50%の確率でuniversity=1となるように変更
#　mutate()の中でcase_when()を使い、excemption = 1 あるいは university = 1のときはuniversity=1とし、それ以外はuniversity=0とする
df <- df_temp3 %>%
mutate(university_temp = case_when(exemption == 1 ~ "binom_harf",
university == 1 ~ "1",
TRUE ~ "0")) # それ以外は0
# exemption=1のときに50%の確率でuniversity=1となるように変更
#　mutate()の中でcase_when()を使い、excemption = 1 あるいは university = 1のときはuniversity=1とし、それ以外はuniversity=0とする
df <- df_temp3 %>%
mutate(university_temp = case_when(exemption == 1 ~ binom_harf,
university == 1 ~ 1,
TRUE ~ 0)) # それ以外は0
# exemption=1のときに50%の確率でuniversity=1となるように変更
#　mutate()の中でcase_when()を使い、excemption = 1 あるいは university = 1のときはuniversity=1とし、それ以外はuniversity=0とする
df <- mutate(df_temp3, university_temp = case_when(exemption == 1 ~ binom_harf,
university == 1 ~ 1,
TRUE ~ 0)) # それ以外は0
# exemption=1のときに50%の確率でuniversity=1となるように変更
#　mutate()の中でcase_when()を使い、excemption = 1 あるいは university = 1のときはuniversity=1とし、それ以外はuniversity=0とする
df <- df_temp3 %>%
mutate(university_temp = case_when(exemption == 1 ~ 1,
university == 1 ~ 1,
TRUE ~ 0)) # それ以外は0
# exemption=1のときに50%の確率でuniversity=1となるように変更
#　mutate()の中でcase_when()を使い、excemption = 1 あるいは university = 1のときはuniversity=1とし、それ以外はuniversity=0とする
df <- df_temp3 %>%
mutate(university_temp = case_when(exemption == 1 ~ 1,
university == 1 ~ 1,
TRUE ~ 0)) # それ以外は0
df_temp3 <- df_temp2 %>% mutate(binom_harf = rbinom(10000, 1, 0.5))
# exemption=1のときに50%の確率でuniversity=1となるように変更
#　mutate()の中でcase_when()を使い、excemption = 1 あるいは university = 1のときはuniversity=1とし、それ以外はuniversity=0とする
df <- df_temp3 %>%
mutate(university = case_when(exemption == 1 ~ 1,
university == 1 ~ 1,
TRUE ~ 0)) # それ以外は0
# exemption=1のときに50%の確率でuniversity=1となるように変更
#　mutate()の中でcase_when()を使い、excemption = 1 あるいは university = 1のときはuniversity=1とし、それ以外はuniversity=0とする
df <- df_temp3 %>%
mutate(university = case_when(exemption == 1 ~ binom_harf,
university == 1 ~ 1,
TRUE ~ 0)) # それ以外は0
# exemption=1のときに50%の確率でuniversity=1となるように変更
#　mutate()の中でcase_when()を使い、excemption = 1 あるいは university = 1のときはuniversity=1とし、それ以外はuniversity=0とする
df <- df_temp3 %>%
mutate(university = case_when(exemption == 1 ~ as.numeric(binom_harf),
university == 1 ~ 1,
TRUE ~ 0)) # それ以外は0
# exemption=1のときに50%の確率でuniversity=1となるように変更
#　mutate()の中でcase_when()を使い、excemption = 1 あるいは university = 1のときはuniversity=1とし、それ以外はuniversity=0とする
df <- df_temp3 %>%
mutate(university = case_when(exemption == 1 ~ rbinom(10000, 1, 0.5),
university == 1 ~ 1,
TRUE ~ 0)) # それ以外は0
# exemption=1のときに50%の確率でuniversity=1となるように変更
#　mutate()の中でcase_when()を使い、excemption = 1 あるいは university = 1のときはuniversity=1とし、それ以外はuniversity=0とする
df <- df_temp3 %>%
mutate(university = case_when(exemption == 1 ~ as.numeric(rbinom(10000, 1, 0.5)),
university == 1 ~ 1,
TRUE ~ 0)) # それ以外は0
# exemption=1のときに50%の確率でuniversity=1となるように変更
#　mutate()の中でcase_when()を使い、excemption = 1 あるいは university = 1のときはuniversity=1とし、それ以外はuniversity=0とする
df <- df_temp3 %>%
mutate(university = case_when(exemption == 1 ~ as.numeric(rbinom(n_exemption, 1, 0.5)),
university == 1 ~ 1,
TRUE ~ 0)) # それ以外は0
# exemption=1のときに50%の確率でuniversity=1となるように変更
#　mutate()の中でcase_when()を使い、excemption = 1 あるいは university = 1のときはuniversity=1とし、それ以外はuniversity=0とする
df <- df_temp3 %>%
mutate(university = case_when(exemption == 1 ~ as.numeric(rbinom(1, 1, 0.5)),
university == 1 ~ 1,
TRUE ~ 0)) # それ以外は0
# exemption=1のときに50%の確率でuniversity=1となるように変更
#　mutate()の中でcase_when()を使い、excemption = 1 あるいは university = 1のときはuniversity=1とし、それ以外はuniversity=0とする
df <- df_temp3 %>%
mutate(university = case_when(exemption == 1 ~ as.numeric(rbinom(1000, 1, 0.5)),
university == 1 ~ 1,
TRUE ~ 0)) # それ以外は0
# exemption=1のときに50%の確率でuniversity=1となるように変更
#　mutate()の中でcase_when()を使い、excemption = 1 あるいは university = 1のときはuniversity=1とし、それ以外はuniversity=0とする
df <- df_temp3 %>%
mutate(university = case_when(exemption == 1 ~ as.numeric(rbinom(1, 1, 0.5)),
university == 1 ~ 1,
TRUE ~ 0)) # それ以外は0
# exemption=1のときに50%の確率でuniversity=1となるように変更
#　mutate()の中でcase_when()を使い、excemption = 1 あるいは university = 1のときはuniversity=1とし、それ以外はuniversity=0とする
df <- df_temp2 %>%
mutate(university = case_when(exemption == 1 ~ as.numeric(rbinom(1, 1, 0.5)),
university == 1 ~ 1,
TRUE ~ 0)) # それ以外は0
# exemption=1のときに50%の確率でuniversity=1となるように変更
#　mutate()の中でcase_when()を使い、excemption = 1 あるいは university = 1のときはuniversity=1とし、それ以外はuniversity=0とする
df <- df_temp2 %>%
mutate(university = case_when(exemption == 1 ~ as.numeric(rbinom(10000, 1, 0.5)),
university == 1 ~ 1,
TRUE ~ 0)) # それ以外は0
# exemption=1のときに50%の確率でuniversity=1となるようにする
# mutate()の中でcase_when()を使う
# case_when()での場合分けでの数字生成がnumericで行われるように、as.numeric()の中でrbinomを使って0,1の乱数を生成
df <- df_temp2 %>%
mutate(university = case_when(exemption == 1 ~ as.numeric(rbinom(10000, 1, 0.5)), # exepmmption=1なら50%の確率で1. n=10000にする必要あり
university == 1 ~ 1, #すでにuniversity=1なら1
TRUE ~ 0)) # それ以外は0
# check sample size of university = 1
summury(df)
# check sample size of university = 1
sum(df)
# check sample size of university = 1
summury(df)
# check sample size of university = 1
summary(df)
# check sample size of university = 1
describe(df)
# check sample size of university = 1
library(Hmisc)
install.packages("Hmisc")
library
# check sample size of university = 1
library(Hmisc)
describe(df)
# 所得
df["income"] = 200 + 10*df["ability"] + 500*df["university"] + rnorm(n, mean = 0, sd = 50)
